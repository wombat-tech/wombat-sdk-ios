#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef WOMBATAUTH_SWIFT_H
#define WOMBATAUTH_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="WombatAuth",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class WMEOSIOAuth;

SWIFT_CLASS_NAMED("Action")
@interface WMEOSIOAction : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull account;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSArray<WMEOSIOAuth *> * _Nonnull auth;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull data;
- (nonnull instancetype)initWithAccount:(NSString * _Nonnull)account name:(NSString * _Nonnull)name auth:(NSArray<WMEOSIOAuth *> * _Nonnull)auth data:(NSDictionary<NSString *, id> * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface WMEOSIOAction (SWIFT_EXTENSION(WombatAuth))
@end


SWIFT_CLASS_NAMED("Auth")
@interface WMEOSIOAuth : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull actor;
@property (nonatomic, readonly, copy) NSString * _Nonnull permission;
- (nonnull instancetype)initWithActor:(NSString * _Nonnull)actor permission:(NSString * _Nonnull)permission OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSURL;
@class WMBlockchain;
@class WMResultObj;
@class WMEOSIOTransfer;
@class WMEOSIOTransaction;
@class WMEVMTransaction;
@class NSData;

SWIFT_CLASS("_TtC10WombatAuth6WMAuth")
@interface WMAuth : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) WMAuth * _Nonnull shared;)
+ (WMAuth * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Registers Dapp
/// \param name Dapp’s name
///
/// \param icon Dapp’s icon
///
/// \param blockchain Blockchain in which the dApp will operate
///
- (void)registerAppWithName:(NSString * _Nonnull)name icon:(NSURL * _Nonnull)icon blockchain:(WMBlockchain * _Nonnull)blockchain;
/// Processes the received URL resource in Objective-C.
/// Place this in <code>application(_:open:options:)</code>
/// \param url The URL resource
///
/// \param completion A block object to be executed when the URL is processed
///
///
/// returns:
/// <code>true</code> if the URL resource can be processed and <code>false</code> if not
- (BOOL)openURL:(NSURL * _Nonnull)url completionHandler:(SWIFT_NOESCAPE void (^ _Nonnull)(WMResultObj * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Requests authorization
- (BOOL)requestAuthorizationAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Requests EOSIO Transfer
/// \param transfer Transfer Details
///
- (BOOL)requestEOSIOTransfer:(WMEOSIOTransfer * _Nonnull)transfer :(NSError * _Nullable * _Nullable)error;
/// Pushes EOSIO Transaction
/// \param transaction Transaction details
///
- (BOOL)pushEOSIOTransaction:(WMEOSIOTransaction * _Nonnull)transaction :(NSError * _Nullable * _Nullable)error;
/// Pushes EVM Transaction
/// \param transaction Transaction details
///
- (BOOL)pushEVMTransaction:(WMEVMTransaction * _Nonnull)transaction :(NSError * _Nullable * _Nullable)error;
/// Requests EOSIO Signature
/// \param account Account name
///
/// \param data Signature data
///
- (BOOL)requestSignatureWithAccount:(NSString * _Nonnull)account data:(NSString * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
/// Requests EVM Signature
/// \param message Message to sign
///
- (BOOL)personalSignWithMessage:(NSString * _Nonnull)message error:(NSError * _Nullable * _Nullable)error;
/// Signs typed data using <code>eth_signTypedData_v4</code>
/// \param data Typed data
///
- (BOOL)signTypedDataWithData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum WMBlockchainPlatform : NSInteger;

SWIFT_CLASS("_TtC10WombatAuth12WMBlockchain")
@interface WMBlockchain : NSObject
- (nonnull instancetype)initWithPlatform:(enum WMBlockchainPlatform)platform chainID:(NSString * _Nonnull)chainID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface WMBlockchain (SWIFT_EXTENSION(WombatAuth))
@property (nonatomic, readonly) BOOL isEvm;
@property (nonatomic, readonly) BOOL isEosio;
@end


@interface WMBlockchain (SWIFT_EXTENSION(WombatAuth))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) WMBlockchain * _Nonnull ethereum;)
+ (WMBlockchain * _Nonnull)ethereum SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) WMBlockchain * _Nonnull polygon;)
+ (WMBlockchain * _Nonnull)polygon SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) WMBlockchain * _Nonnull bnb;)
+ (WMBlockchain * _Nonnull)bnb SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) WMBlockchain * _Nonnull heco;)
+ (WMBlockchain * _Nonnull)heco SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) WMBlockchain * _Nonnull fantom;)
+ (WMBlockchain * _Nonnull)fantom SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) WMBlockchain * _Nonnull avalanche;)
+ (WMBlockchain * _Nonnull)avalanche SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) WMBlockchain * _Nonnull eos;)
+ (WMBlockchain * _Nonnull)eos SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) WMBlockchain * _Nonnull telos;)
+ (WMBlockchain * _Nonnull)telos SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) WMBlockchain * _Nonnull wax;)
+ (WMBlockchain * _Nonnull)wax SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, WMBlockchainPlatform, open) {
  WMBlockchainPlatformEvm = 0,
  WMBlockchainPlatformEosio = 1,
};


SWIFT_CLASS("_TtC10WombatAuth18WMEOSIOTransaction")
@interface WMEOSIOTransaction : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull from;
@property (nonatomic, readonly, copy) NSArray<WMEOSIOAction *> * _Nonnull actions;
- (nonnull instancetype)initFrom:(NSString * _Nonnull)from actions:(NSArray<WMEOSIOAction *> * _Nonnull)actions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface WMEOSIOTransaction (SWIFT_EXTENSION(WombatAuth))
@end



SWIFT_CLASS("_TtC10WombatAuth15WMEOSIOTransfer")
@interface WMEOSIOTransfer : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull from;
@property (nonatomic, readonly, copy) NSString * _Nonnull to;
@property (nonatomic, readonly) double amount;
@property (nonatomic, readonly) NSInteger precision;
@property (nonatomic, readonly, copy) NSString * _Nonnull contract;
@property (nonatomic, readonly, copy) NSString * _Nonnull symbol;
@property (nonatomic, readonly, copy) NSString * _Nonnull memo;
- (nonnull instancetype)initFrom:(NSString * _Nonnull)from to:(NSString * _Nonnull)to amount:(double)amount precision:(NSInteger)precision contract:(NSString * _Nonnull)contract symbol:(NSString * _Nonnull)symbol memo:(NSString * _Nonnull)memo OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10WombatAuth16WMEVMTransaction")
@interface WMEVMTransaction : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull from;
@property (nonatomic, readonly, copy) NSString * _Nonnull to;
@property (nonatomic, readonly, copy) NSString * _Nullable value;
@property (nonatomic, readonly, copy) NSData * _Nullable data;
- (nonnull instancetype)initFrom:(NSString * _Nonnull)from to:(NSString * _Nonnull)to value:(NSString * _Nullable)value data:(NSData * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum WMActionType : NSInteger;
enum WMResultType : NSInteger;

SWIFT_CLASS("_TtC10WombatAuth11WMResultObj")
@interface WMResultObj : NSObject
@property (nonatomic, readonly) enum WMActionType action;
@property (nonatomic, readonly, strong) WMBlockchain * _Nonnull blockchain;
@property (nonatomic, readonly) enum WMResultType type;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull data;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)initWithAction:(enum WMActionType)action blockchain:(WMBlockchain * _Nonnull)blockchain type:(enum WMResultType)type data:(NSDictionary<NSString *, id> * _Nonnull)data message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, WMActionType, open) {
  WMActionTypeUnknown = 0,
  WMActionTypeAuthorize = 1,
  WMActionTypeSignEOSIO = 2,
  WMActionTypeTransferEOSIO = 3,
  WMActionTypePushTransactionEOSIO = 4,
  WMActionTypePersonalSignEVM = 5,
  WMActionTypeSignTypedDataEVM = 6,
  WMActionTypePushTransactionEVM = 7,
};

typedef SWIFT_ENUM(NSInteger, WMResultType, open) {
  WMResultTypeSuccess = 0,
  WMResultTypeError = 1,
  WMResultTypeUserCancelled = 2,
};

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
